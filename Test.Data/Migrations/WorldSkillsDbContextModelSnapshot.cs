// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Test.Data.Models;

namespace Test.Data.Migrations
{
    [DbContext(typeof(WorldSkillsDbContext))]
    partial class WorldSkillsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Test.Data.Models.Accountant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastEnterDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("LastEnterTime")
                        .HasColumnType("time");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Accountants");
                });

            modelBuilder.Entity("Test.Data.Models.AccountantsCheck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountantId")
                        .HasColumnType("int");

                    b.Property<int>("CheckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountantId");

                    b.HasIndex("CheckId");

                    b.ToTable("AccountantsChecks");
                });

            modelBuilder.Entity("Test.Data.Models.AccountantsService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountantId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountantId");

                    b.HasIndex("ServiceId");

                    b.ToTable("AccountantsServices");
                });

            modelBuilder.Entity("Test.Data.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Test.Data.Models.Analyzer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.ToTable("Analyzers");
                });

            modelBuilder.Entity("Test.Data.Models.AnalyzerReport", b =>
                {
                    b.Property<int>("AnalyzerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<long>("WorkTime")
                        .HasColumnType("bigint");

                    b.HasIndex("AnalyzerId");

                    b.ToTable("AnalyzerReports");
                });

            modelBuilder.Entity("Test.Data.Models.Check", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StrahCompanyId")
                        .HasColumnType("int");

                    b.Property<decimal>("Summary")
                        .HasColumnType("money");

                    b.HasKey("Id");

                    b.HasIndex("StrahCompanyId");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("Test.Data.Models.Laborant", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("LastEnterDate")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("LastEnterTime")
                        .HasColumnType("time");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Laborants");
                });

            modelBuilder.Entity("Test.Data.Models.LaborantsService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LaborantId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceCode")
                        .HasColumnType("int");

                    b.HasIndex("LaborantId");

                    b.HasIndex("ServiceCode");

                    b.ToTable("LaborantsServices");
                });

            modelBuilder.Entity("Test.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("date");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Test.Data.Models.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatuses");
                });

            modelBuilder.Entity("Test.Data.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("date");

                    b.Property<string>("Ein")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InsuaranceAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("InsuranceInn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("InsuranceName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PassportN")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Passport_N");

                    b.Property<string>("PassportS")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Passport_S");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SocialSecNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SocialTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SocialTypeId");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Test.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Test.Data.Models.Service", b =>
                {
                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("Code")
                        .HasName("PK__Services__A25C5AA67F60ED59");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Test.Data.Models.ServicesReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("LaborantId")
                        .HasColumnType("int");

                    b.Property<int>("ServicesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LaborantId");

                    b.HasIndex("ServicesId");

                    b.ToTable("ServicesReports");
                });

            modelBuilder.Entity("Test.Data.Models.SocialType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SocialTypes");
                });

            modelBuilder.Entity("Test.Data.Models.StrahCompany", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Bik")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("BIK");

                    b.Property<string>("Inn")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("INN");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Rs")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("RS");

                    b.HasKey("Id");

                    b.ToTable("StrahCompanies");
                });

            modelBuilder.Entity("Test.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Test.Data.Models.AccountantsCheck", b =>
                {
                    b.HasOne("Test.Data.Models.Accountant", "Accountant")
                        .WithMany("AccountantsChecks")
                        .HasForeignKey("AccountantId")
                        .HasConstraintName("FK__Accountan__Accou__6FE99F9F")
                        .IsRequired();

                    b.HasOne("Test.Data.Models.Check", "Check")
                        .WithMany("AccountantsChecks")
                        .HasForeignKey("CheckId")
                        .HasConstraintName("FK__Accountan__Check__70DDC3D8")
                        .IsRequired();

                    b.Navigation("Accountant");

                    b.Navigation("Check");
                });

            modelBuilder.Entity("Test.Data.Models.AccountantsService", b =>
                {
                    b.HasOne("Test.Data.Models.Accountant", "Accountant")
                        .WithMany("AccountantsServices")
                        .HasForeignKey("AccountantId")
                        .HasConstraintName("FK__Accountan__Accou__656C112C")
                        .IsRequired();

                    b.HasOne("Test.Data.Models.Service", "Service")
                        .WithMany("AccountantsServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Accountan__Servi__66603565")
                        .IsRequired();

                    b.Navigation("Accountant");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Test.Data.Models.AnalyzerReport", b =>
                {
                    b.HasOne("Test.Data.Models.Analyzer", "Analyzer")
                        .WithMany()
                        .HasForeignKey("AnalyzerId")
                        .HasConstraintName("FK__AnalyzerR__Analy__060DEAE8")
                        .IsRequired();

                    b.Navigation("Analyzer");
                });

            modelBuilder.Entity("Test.Data.Models.Check", b =>
                {
                    b.HasOne("Test.Data.Models.StrahCompany", "StrahCompany")
                        .WithMany("Checks")
                        .HasForeignKey("StrahCompanyId")
                        .HasConstraintName("FK__Checks__StrahCom__6B24EA82")
                        .IsRequired();

                    b.Navigation("StrahCompany");
                });

            modelBuilder.Entity("Test.Data.Models.LaborantsService", b =>
                {
                    b.HasOne("Test.Data.Models.Laborant", "Laborant")
                        .WithMany()
                        .HasForeignKey("LaborantId")
                        .HasConstraintName("FK__Laborants__Labor__0BC6C43E")
                        .IsRequired();

                    b.HasOne("Test.Data.Models.Service", "ServiceCodeNavigation")
                        .WithMany()
                        .HasForeignKey("ServiceCode")
                        .HasConstraintName("FK__Laborants__Servi__0CBAE877")
                        .IsRequired();

                    b.Navigation("Laborant");

                    b.Navigation("ServiceCodeNavigation");
                });

            modelBuilder.Entity("Test.Data.Models.Order", b =>
                {
                    b.HasOne("Test.Data.Models.OrderStatus", "OrderStatus")
                        .WithMany("Orders")
                        .HasForeignKey("OrderStatusId")
                        .HasConstraintName("FK__Orders__OrderSta__5070F446")
                        .IsRequired();

                    b.HasOne("Test.Data.Models.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK__Orders__ServiceI__4F7CD00D")
                        .IsRequired();

                    b.Navigation("OrderStatus");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Test.Data.Models.Patient", b =>
                {
                    b.HasOne("Test.Data.Models.SocialType", "SocialType")
                        .WithMany("Patients")
                        .HasForeignKey("SocialTypeId")
                        .HasConstraintName("FK__Patients__Social__4222D4EF")
                        .IsRequired();

                    b.Navigation("SocialType");
                });

            modelBuilder.Entity("Test.Data.Models.ServicesReport", b =>
                {
                    b.HasOne("Test.Data.Models.Laborant", "Laborant")
                        .WithMany("ServicesReports")
                        .HasForeignKey("LaborantId")
                        .HasConstraintName("FK__ServicesR__Labor__5812160E")
                        .IsRequired();

                    b.HasOne("Test.Data.Models.Service", "Services")
                        .WithMany("ServicesReports")
                        .HasForeignKey("ServicesId")
                        .HasConstraintName("FK__ServicesR__Servi__59063A47")
                        .IsRequired();

                    b.Navigation("Laborant");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("Test.Data.Models.User", b =>
                {
                    b.HasOne("Test.Data.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Test.Data.Models.Accountant", b =>
                {
                    b.Navigation("AccountantsChecks");

                    b.Navigation("AccountantsServices");
                });

            modelBuilder.Entity("Test.Data.Models.Check", b =>
                {
                    b.Navigation("AccountantsChecks");
                });

            modelBuilder.Entity("Test.Data.Models.Laborant", b =>
                {
                    b.Navigation("ServicesReports");
                });

            modelBuilder.Entity("Test.Data.Models.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Test.Data.Models.Service", b =>
                {
                    b.Navigation("AccountantsServices");

                    b.Navigation("Orders");

                    b.Navigation("ServicesReports");
                });

            modelBuilder.Entity("Test.Data.Models.SocialType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("Test.Data.Models.StrahCompany", b =>
                {
                    b.Navigation("Checks");
                });
#pragma warning restore 612, 618
        }
    }
}
